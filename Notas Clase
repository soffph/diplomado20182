
Algoritmos de hash y generacion de números pseudoaleatrorios 

-hash 
    --entradas diferentes salidas diferentes
    --no tiene descifrado
    --sha-3
    
 cifrado
    -llaves simetricas de la AES (sdes, rijndael)
    -llaves asimetricas RSA 
    
 certificados 
    -mecanismo para compartir llaves publicas 
    -firma digital 
        
-------------------------------------------------------------------------------------------------------------
test failure breakpoint 
    quiero que pauses la ejecucion de la ejecucion de las pruebas cuando una prueba falla

"Debugging"  y crashes 27 abril 2018

[---------- Why no usar printf? ----------]

Issues: 

1) Se requiere recompliar 
    Gasta tiempo
2) Modificaciones al codigo fuente
   Intrusivo 
   Cambio en archivos que no tendría que haber cambios
   Se te olvida borrarlos 
   Si se arreglaba en una linea cuando hacen el commit suben 30 líneas (commits de archivos que no modificamos realmente) 
   El commit debería ser solo de lo que se cambio 
   Cherry pit (solo subir el cambio que se quiere implementar)
3) Pasivos (son estaticos)
    Imprimes cosas que no son 
    Vuelves a compilar 
4) El print es síncrono y por lo tanto si tarda en compilacion aprox 1ms
    
compilar el codigo 
        -> cambios en el codigo intrusivos 
        -> pasivos
        
[---------- Debuggers  ----------]
        
lldb: 
    * stack trace (foto del stack parte del proceso -> muestra la secuencia de ejecucion del programa) 
    * primer funcion que se ejecuta START
    
    lldb comandos
    po (print object)
    p (print que muchas veces da una mejor descripcion visual

[---------- Breakpoints ----------]
El break point tiene un menu (posicional) el normalito que usamos en la consola
    
    Reveal in breakpoint Navigation
        lista de breakpoints de todo el proyecto 
    - Condition ej; mensaje > 2
    - Ignore: (si se cumple esta condicion ignorala tantas veces; no es necesario que tenga una condicion) 
    
Breakpoints simbolicos
    
    -[UIViewController initWithNibName:bundle:]
    me imprimio el nombre del view controller en el que se ejecutó con el breakpoint 
    -[UIViewController initWithCoder:]
    Ambos se ejecutan dependiendo como se creo el view controller 
    uno es para cuando se crea desde el storyboard o se crea desde codigo 
     
     -[UIApplication sendAction:to:from:forEvent:]
     cada ves que se ejecute un evento manda el nombre del viewcontroller
     
Breakpoints de excepciones

[---------- Reusable breakpoints ----------]
   El breakpoint es local no se guarda en el proyecto 
   Compartir los breakpoints
                           -share breakpoint
                           -son independiente del codigo fuente
                           -compartir los logs 
  
[---------- Crashes ----------]
    -watchdog (timeouts) 
        ej. cuando arranca la app el so cuena cuanto tiempo se tarda en que se levante si se tarda mas la mata 
    -usuario termina la app 
    -poca memoria
    -acceso invalido a memoria
    -envio de mensaje a un objeto liberado
    TARDES60
    
//--------------------------------------------------------------------------------------------
#UserDefaults
    ES la interfaz para configuracion default del usuairo, donde se almacenan parejas de 'key-value' persistentes a traves de la aplicacion.
    
#Cuando usar
-Cuando son configuraciones basicas del usuario
-Cuando no importa que los datos esten expuestos
-Cuando usamos primitivas de objective-c 






UserDefaults -> para settings de usuarios 
filemanager 
    documents
    cache 
    temporal
NSCache
Keychain -> todos los certificados, los logins etc (llaves) certificados de seguridad,
            contraseñas de segiridad, lo guarda cifrado 
CoreData
    guide
    persistent store features
  https://github.com/iOSLabUNAM/diplomado/wiki/Persistencia-de-datos

codable para guardar current user a disco 
evitar que no se guarde el token (de manera transparente) NO UserSettings
imagen guardar a cache
key store value similar a lo que tiene redis pero usando archivable -> para el tocken 


----------------------------------------------------------------------------------------------------------------------


Application Sandbox

Conceptos
    Memoria virtual 
    
let fileManager = FileManager.default
let documentDirectories = fileManager.urls(
                                            for: .documentDirectory,
                                            in: .userDomainMask)
let documentDirectory = DocumentDirectories.first!




//READ WRITE BINARY DATA para guardar cosas en disco 

init(contentsOf url: URL,
    options: Data.ReadingOptions) throws //leer un archivo binario dentro de sandbox
    
func write(to url: URL,
              options: Data.WritingOptions) throws //


protocol NSCoding{
    //When we want to load an object from disk
    init? (coder aDecoder : NSCoder)
   
   //When we wanto to save an object to disk...
   func encode(with aCoder : 
   
   
}
                                           
binario -> nscoding / nskarchive -> realm -> core data

orm -> de um modelo entidad - relación a core data
sqlite (es un manejador de bases de datos que soporta casi todo lo que tiene un oracle y todo por 450k de espacio) 
        tiene la cobertura de pruebas más automatizada 
CORE DATA (no es un orm) 
          -NextSepManagedObjectContext
                    |
             persistentStoreCoordinator
                    |
                    v
              NSPersistentStoreCoordinator. -----------------> NSManagedObjectModel
                    |                                           |
                    v                                           v
              
              sqliete persisten store                          nsentitydescription
              
              
          -EOF enterprised object framework 
          -ES un manejador de base de datos orientado a objetos en memoria

Los nibs son objetos graficos (serializo porque me importa su persistencia)
    eof es el equivalente de los storyboards pero de los objetos de negocio
    objetos de negocio (casa, perro, etc) 
    eof puede construir objetos de negocio en memoria y me lo guarda así 
    si alguno hace referencia a otro tambien guarda esta relacion pero no esta haciendo ningun mapeo
    (persistir en disco y leer de disco) 
En core data puedo tener algo muy complejo 
EOF asi como CORE DATA -> permite guradar en binario directamente 
                          toma todos los elementos y los va a serializar 
     
     Ejemplo de objeto: 
     Nombre     }           Core data lleva un registro de los cambios 
     Cantidad.   >------    (un arbol) Todos estos cambios core data los va cambiando
     ...        }           muy similar a un control de versiones
                            te permite hacer cambios y volver a las versiones anteriores
                            soporta UNDO y REDO
                            Todo eso lo maneja COREDATA con NSManagedObjectContext (antes su nombre: NSEditingContext)
    El editingcontext esta guradando un grafo de las relaciones y de los objetos
    Lo mismo que con el interface builder 
    (Buscar videos de las demo que hace steve jobs del interface builder) 
    
    Guardarlo en binario (rapidez) 
    el problema es que debo leer todo (no puedo leer pedacitos) 
    Ej. debes subir todos a ram para poder cambiar solo algo y luego volverlo a subir 
            [binario]
            [xlm]
            [sqlite] -> si me permite leer solo un pedacito!! Guarda solo un pedacio
            si el grafo de objetos es pequeño pues si guradar en binario 
            sino usar sqlite
            NO ES ORM ( no se ve bonito no esta pensado para mapearlo bonito a tablas sino para guardarlo mas rápido)
    
    El editing context (NSManagedObjetContext) -> es al que le piden las cosas 
                                                  pero se ayuda de otros objetos NSPersistentStoreCoordinator (el cordinador de almacenamiento) 
                                                  Este mezcla sin importar de que base de datos o que forma 
                                                  de almacenamiento de datos uso y los agurpa en el mismo
                                                  (pero ya no tiene razón de ser porque se trajeron algo 
                                                  que es complejo pero que en su antiguo contexto si se requerian pero  
                                                  ya no son necesarias; ahorita en las aplicaciones que solo tienen una fuente de datos
                                                  ya no lo ocupa) Ahora nuestros stores son webservices 
                                                 
REALM   -> Sí esta pensado como un orm y cumplir las caracteristicas de activedirectory
           
mas facil -> mas facil usar nscoding y no meter dependencias de terceros ni nada 

NSPersistentContainer

Aquí estuvieron Sergio y Jorge =)
 

  

    
     
                
